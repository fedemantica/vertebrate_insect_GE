configfile: "config.yaml"

###### paths ###############
DATA = config["general_paths"]["data"]
SRC = config["general_paths"]["src"]
CONDA_ENVS = config["general_paths"]["conda_envs"]
NOBACKUP_DIR = config["general_paths"]["nobackup_dir"]
GENERAL_PATTERNS = config["paths"]["general_patterns"]
GENE_SETS_DIR = config["paths"]["gene_sets_dir"]
PCA_ANALYSIS_DIR = config["paths"]["pca_analysis"]
GO_TRANSFERS = config["paths"]["go_transfers"]
ORIGINAL_REL_EXPR_DIR = config["paths"]["original_rel_expr_dir"]
REL_EXPR_DIR = config["paths"]["rel_expr_dir"]
GTF_REF_DIR = config["paths"]["gtf_ref_dir"]
DATABASE = config["paths"]["database"]

######## tools ############
RUN_GPROFILER2 = config["tools"]["run_gprofiler2"]
GET_GMT_FILES = config["tools"]["get_gmt_files"]
COMPUTE_REL_EXPR = config["tools"]["compute_rel_expr"]
GET_START_STOP_INFO = config["tools"]["get_start_stop_info"]
GET_CDS_EXONS = config["tools"]["get_CDS_exons"]
FORMAT_PHYLOP_SCORES = config["tools"]["format_phyloP_scores"]

###### variables ###########
ALL_SPECIES = config["variables"]["all_species"]
BILATERIA = ALL_SPECIES
VERTEBRATA = config["variables"]["vertebrata"]
INSECTA = config["variables"]["insecta"]
DEUTEROSTOMA = config["variables"]["deuterostoma"]
PROTOSTOMA = config["variables"]["protostoma"]

CLADE_SPECIES_DICT = {}
CLADE_SPECIES_DICT["Vertebrata"] = VERTEBRATA
CLADE_SPECIES_DICT["Insecta"] = INSECTA
CLADE_SPECIES_DICT["Bilateria"] = BILATERIA

ALL_TISSUES = config["variables"]["all_tissues"]

MY_MEASURES = config["variables"]["my_measures"]
CONSERVATION_CATEGORIES = config["variables"]["conservation_categories"]

###### targets ##########
DEFINE_GENE_GROUPS = expand("{path}/{measure}/GO_enrichments/{measure}-{gene_number}_{category}-BH_genes-GO_input.tab", path=GENERAL_PATTERNS, measure=MY_MEASURES, gene_number=500, category=CONSERVATION_CATEGORIES)
GO_ENRICHMENTS = expand("{path}/{measure}/GO_enrichments/{species}_transfers/{measure}-{gene_number}_{category}-BH_genes-GO_res.tab", path=GENERAL_PATTERNS, measure=MY_MEASURES, gene_number=500, category=CONSERVATION_CATEGORIES, species="Hs2")
RELATIVE_EXPRESSIONS = expand("{path}/{species}-protein_coding_relative_ts.tab", path=REL_EXPR_DIR, species=VERTEBRATA+[species if species != "BmA" else "Bmo" for species in INSECTA])

####### rules ############
rule all:	
	input:
		RELATIVE_EXPRESSIONS,
		DEFINE_GENE_GROUPS,
		GO_ENRICHMENTS

#######################################################
###### EXPRESSION PROPORTIONS WITHOUT ADIPOSE #########
#######################################################

rule compute_relative_expression:
	input:
		ORIGINAL_REL_EXPR_DIR+"/{species}-protein_coding-tissue_average_expr-NOSVA-log2-TPMs-NORM.tab"
	output:
		REL_EXPR_DIR+"/{species}-protein_coding_relative_ts.tab"
	shell:
		"""
		python {COMPUTE_REL_EXPR}	--input {input} \
						--output {output}
		"""

#######################################################
###### SEQ SIM BY OG ##################################
#######################################################

###### Only BestAncestrals
rule compute_seq_sim_by_OG:
	input:
		best_hits = GENE_SETS_DIR+"/All_version2/STRICT/Bilateria/conserved/Bilateria_conserved-reclustered_orthogroups-BH_genes.txt",
		measure_file = GENE_SETS_DIR+"/All_version2/sequence_similarities/all_pairwise_sequence_similarities.txt"
	output:
		clade_level = GENERAL_PATTERNS+"/sequence_similarities/sequence_similarities_by_clade-BH_genes.tab",
		vertebrata_pairwise = GENERAL_PATTERNS+"/sequence_similarities/sequence_similarities_pairwise_vertebrata-BH_genes.tab",
		insecta_pairwise = GENERAL_PATTERNS+"/sequence_similarities/sequence_similarities_pairwise_insecta-BH_genes.tab", 
	params:
		vertebrata = VERTEBRATA,
		insecta = INSECTA,
		my_measure = "sequence_similarities"
	run:
		import pandas as pd
		import re

		#Read input
		best_hits_df = pd.read_table(str(input.best_hits), sep="\t", index_col=False, header=None, names=["OG_ID", "Species", "GeneID"])
		BH_genes = list(best_hits_df["GeneID"])
		measure_df = pd.read_table(str(input.measure_file), sep="\t", index_col=False, header=None, names=["OG_ID", "Species1", "Species2", "GeneID1", "GeneID2", str(params.my_measure)])
		#Filter only for BH genes
		measure_BH_df = measure_df.loc[(measure_df["GeneID1"].isin(BH_genes)) & (measure_df["GeneID2"].isin(BH_genes))]
		#Filter only for Vertebrate species
		measure_BH_vertebrate_df = measure_BH_df.loc[(measure_BH_df["Species1"].isin(params.vertebrata)) & (measure_BH_df["Species2"].isin(params.vertebrata))]
		#Groupby OG_ID and compute average (I have each value repeated twice, but is should not matter)
		measure_BH_vertebrate_mean_df = measure_BH_vertebrate_df[["OG_ID", str(params.my_measure)]].groupby("OG_ID").mean()
		measure_BH_vertebrate_mean_df = measure_BH_vertebrate_mean_df.rename(columns={str(params.my_measure) : str(params.my_measure)+"_vertebrata"})
		#Filter only for Insect species
		measure_BH_insect_df = measure_BH_df.loc[(measure_BH_df["Species1"].isin(params.insecta)) & (measure_BH_df["Species2"].isin(params.insecta))]
		#Groupby OG_ID and compute average
		measure_BH_insect_mean_df = measure_BH_insect_df[["OG_ID", str(params.my_measure)]].groupby("OG_ID").mean()
		measure_BH_insect_mean_df = measure_BH_insect_mean_df.rename(columns={str(params.my_measure) : str(params.my_measure)+"_insecta"})
		#Combine the two dataframes
		combined_df = pd.merge(measure_BH_vertebrate_mean_df, measure_BH_insect_mean_df, on="OG_ID")
		#Compute delta
		combined_df[str(params.my_measure)+"_delta"] = combined_df[str(params.my_measure)+"_vertebrata"] - combined_df[str(params.my_measure)+"_insecta"]
		#Save to output
		combined_df.to_csv(str(output.clade_level), sep="\t", header=True, index=True, na_rep="NA")

		##### Add outputs for single species pairs. For each orthogroup, I am averaging the seq sim in both directions (species1 vs species2 and species2 vs species1)
		## Vertebrates
		vertebrate_pairwise_df = measure_BH_vertebrate_df[["OG_ID", "Species1", "Species2", str(params.my_measure)]].groupby(["OG_ID", "Species1", "Species2"]).mean().reset_index()
		vertebrate_pairwise_df["Species_pair"] = [element[0]+"_"+element[1] if element[0]<element[1] else element[1]+"_"+element[0] for element in zip(list(vertebrate_pairwise_df["Species1"]),list(vertebrate_pairwise_df["Species2"]))] #Make sure Species pairs are ordered
		vertebrate_pairwise_wide_df = vertebrate_pairwise_df.pivot(index="OG_ID", columns="Species_pair", values="sequence_similarities").reset_index()
		## Insects
		insect_pairwise_df = measure_BH_insect_df[["OG_ID", "Species1", "Species2", str(params.my_measure)]].groupby(["OG_ID", "Species1", "Species2"]).mean().reset_index()
		insect_pairwise_df["Species_pair"] = [element[0]+"_"+element[1] if element[0]<element[1] else element[1]+"_"+element[0] for element in zip(list(insect_pairwise_df["Species1"]),list(insect_pairwise_df["Species2"]))] #Make sure Species pairs are ordered
		insect_pairwise_wide_df = insect_pairwise_df.pivot(index="OG_ID", columns="Species_pair", values="sequence_similarities").reset_index()
		##### Save to output
		vertebrate_pairwise_wide_df.to_csv(str(output.vertebrata_pairwise), sep="\t", header=True, index=False, na_rep="NA")
		insect_pairwise_wide_df.to_csv(str(output.insecta_pairwise), sep="\t", header=True, index=False, na_rep="NA")


#######################################################
###### EXPR SIM BY OG #################################
#######################################################

rule compute_expr_sim_by_OG:
	input:
		best_hits = GENE_SETS_DIR+"/All_version2/STRICT/Bilateria/conserved/Bilateria_conserved-reclustered_orthogroups-BH_genes.txt",
		rel_expr_files = expand(REL_EXPR_DIR+"/{species}-protein_coding_relative_ts.tab", species=VERTEBRATA+[species if species != "BmA" else "Bmo" for species in INSECTA]) 
	output:	
		clade_level = GENERAL_PATTERNS+"/expression_similarities/expression_similarities_by_clade-BH_genes.tab",
		vertebrata_pairwise = GENERAL_PATTERNS+"/expression_similarities/expression_similarities_pairwise_vertebrata-BH_genes.tab",
		insecta_pairwise = GENERAL_PATTERNS+"/expression_similarities/expression_similarities_pairwise_insecta-BH_genes.tab", 
	params:
		vertebrata = VERTEBRATA,
		insecta = [species if species != "BmA" else "Bmo" for species in INSECTA],
		tissues = ALL_TISSUES
	run:
		import pandas as pd
		import numpy as np
		import itertools
	
		##### Define logit function
		def logit(p):
		  logit_res = np.log(p/(1-p))
		  return(logit_res)

		##### Define function to compute pairwise expr_sim
		def compute_pairwise_expr_sim(GeneID1_expr, GeneID2_expr):
		  expr_sim = logit(1-sum([abs(a - b) for a,b in zip(GeneID1_expr, GeneID2_expr)])/len(GeneID1_expr))
		  return(expr_sim) 

		#Upload best-hits dataframe
		best_hits_df = pd.read_table(str(input.best_hits), sep="\t", index_col=False, header=None, names=["OG_ID", "Species", "GeneID"])
		best_hits_df["Species"] = [species if species != "BmA" else "Bmo" for species in list(best_hits_df["Species"])]
		BH_genes = list(best_hits_df["GeneID"])
		#Upload all relative expr files into a single df: index=GeneID, columns=Tissues, values=Relative expression 
		all_species_rel_expr_df = pd.DataFrame()
		for my_file in list(input.rel_expr_files):
		  rel_expr_df = pd.read_table(my_file, sep="\t", index_col=0, header=0)
		  #Reorder columns so that all tissues have the same order for all species 
		  rel_expr_df = rel_expr_df[[tissue for tissue in params.tissues if tissue != "Adipose"]]
		  #Attach to general df
		  all_species_rel_expr_df = pd.concat([all_species_rel_expr_df, rel_expr_df])
		#### Filter only for the genes in the best-hits table
		all_species_rel_expr_best_hits_df = all_species_rel_expr_df.loc[all_species_rel_expr_df.index.isin(BH_genes)]
		#Transform dataframe to dictionary: key=GeneID, value=ordered list of relative expr
		GeneID_rel_expr_dict = all_species_rel_expr_best_hits_df.T.to_dict("list")
	
		################################################
		############## VERTEBRATA ######################
		################################################
		vertebrate_df = best_hits_df.loc[best_hits_df["Species"].isin(params.vertebrata)].copy() 
		#Get a dataframe with all pairs of vertebrate genes for each orthogroup
		vertebrate_grouped_df = vertebrate_df.groupby("OG_ID")
		vertebrate_pairwise_df = pd.DataFrame()
		for OG_ID, group in vertebrate_grouped_df:
		  all_geneIDs = list(group["GeneID"])
		  all_geneIDs_combos = itertools.combinations(all_geneIDs, 2)
		  group_df = pd.DataFrame(all_geneIDs_combos, columns=["GeneID1", "GeneID2"])
		  group_df["OG_ID"] = OG_ID
		  vertebrate_pairwise_df = pd.concat([vertebrate_pairwise_df, group_df])
		#Change column order
		vertebrate_pairwise_df = vertebrate_pairwise_df[["OG_ID", "GeneID1", "GeneID2"]]
		#Compute pairwise expression similarities using function
		vertebrate_pairwise_df["Expr_sim"] = vertebrate_pairwise_df.apply(lambda x: compute_pairwise_expr_sim(GeneID_rel_expr_dict[x.GeneID1], GeneID_rel_expr_dict[x.GeneID2]), axis=1)
		#Compute average by orthogroup between all pairwise
		vertebrate_pairwise_grouped_df = vertebrate_pairwise_df.groupby("OG_ID")
		vertebrate_mean_df = pd.DataFrame()
		for OG_ID, group in vertebrate_pairwise_grouped_df:		
		  Expr_sim_mean = np.mean(group["Expr_sim"])
		  vertebrate_mean_df = pd.concat([vertebrate_mean_df, pd.DataFrame({"OG_ID" : [OG_ID], "expression_similarities_vertebrata" : [Expr_sim_mean]})])

		################################################
		############## INSECTA #########################
		################################################
		insect_df = best_hits_df.loc[best_hits_df["Species"].isin(params.insecta)].copy() 
		#Get a dataframe with all pairs of insect genes for each orthogroup
		insect_grouped_df = insect_df.groupby("OG_ID")
		insect_pairwise_df = pd.DataFrame()
		for OG_ID, group in insect_grouped_df:
		  all_geneIDs = list(group["GeneID"])
		  all_geneIDs_combos = itertools.combinations(all_geneIDs, 2)
		  group_df = pd.DataFrame(all_geneIDs_combos, columns=["GeneID1", "GeneID2"])
		  group_df["OG_ID"] = OG_ID
		  insect_pairwise_df = pd.concat([insect_pairwise_df, group_df])
		#Change column order
		insect_pairwise_df = insect_pairwise_df[["OG_ID", "GeneID1", "GeneID2"]]
		#Compute pairwise expression similarities using function
		insect_pairwise_df["Expr_sim"] = insect_pairwise_df.apply(lambda x: compute_pairwise_expr_sim(GeneID_rel_expr_dict[x.GeneID1], GeneID_rel_expr_dict[x.GeneID2]), axis=1)
		#Compute average by orthogroup between all pairwise
		insect_pairwise_grouped_df = insect_pairwise_df.groupby("OG_ID")
		insect_mean_df = pd.DataFrame()
		for OG_ID, group in insect_pairwise_grouped_df:		
		  Expr_sim_mean = np.mean(group["Expr_sim"])
		  insect_mean_df = pd.concat([insect_mean_df, pd.DataFrame({"OG_ID" : [OG_ID], "expression_similarities_insecta" : [Expr_sim_mean]})])

		################################################
		######### JOIN AND SAVE TO FILE ################
		################################################
		combined_df = pd.merge(vertebrate_mean_df, insect_mean_df, on="OG_ID")
		combined_df["expression_similarities_delta"] = combined_df["expression_similarities_vertebrata"] - combined_df["expression_similarities_insecta"]
		combined_df.to_csv(str(output.clade_level), sep="\t", header=True, index=False, na_rep="NA")
		##### Vertebrate and Insects pairwises
		GeneID_species_dict = pd.Series(best_hits_df.Species.values, index=best_hits_df.GeneID).to_dict()
		vertebrate_pairwise_df["GeneID1"] = vertebrate_pairwise_df["GeneID1"].map(GeneID_species_dict)
		vertebrate_pairwise_df["GeneID2"] = vertebrate_pairwise_df["GeneID2"].map(GeneID_species_dict)
		insect_pairwise_df["GeneID1"] = insect_pairwise_df["GeneID1"].map(GeneID_species_dict)
		insect_pairwise_df["GeneID2"] = insect_pairwise_df["GeneID2"].map(GeneID_species_dict)
		## Get species pairs and make sure they are ordered
		vertebrate_pairwise_df["Species_pair"] = [element[0]+"_"+element[1] if element[0]<element[1] else element[1]+"_"+element[0] for element in zip(list(vertebrate_pairwise_df["GeneID1"]),list(vertebrate_pairwise_df["GeneID2"]))]
		vertebrate_pairwise_wide_df = vertebrate_pairwise_df.pivot(index="OG_ID", columns="Species_pair", values="Expr_sim").reset_index()
		insect_pairwise_df["Species_pair"] = [element[0]+"_"+element[1] if element[0]<element[1] else element[1]+"_"+element[0] for element in zip(list(insect_pairwise_df["GeneID1"]),list(insect_pairwise_df["GeneID2"]))]
                insect_pairwise_wide_df = insect_pairwise_df.pivot(index="OG_ID", columns="Species_pair", values="Expr_sim").reset_index()
		#Change colnames to BmA for coherency with the other tables
		insect_pairwise_wide_df.columns = insect_pairwise_wide_df.columns.str.replace("Bmo", "BmA")
		## Save to output
                vertebrate_pairwise_wide_df.to_csv(str(output.vertebrata_pairwise), sep="\t", header=True, index=False, na_rep="NA")
                insect_pairwise_wide_df.to_csv(str(output.insecta_pairwise), sep="\t", header=True, index=False, na_rep="NA")

#######################################################
###### OTHER EXPR SIM MEASURE BY ORTHOGROUP ###########
#######################################################

#######################################
###### EXPR COR BY ORTHOGROUP #########
#######################################

#This is spearman correlation performed on normalized expression values
rule compute_expr_cor_by_OG:
	input:
		PCA_ANALYSIS_DIR+"/All_version2/STRICT/Bilateria/conserved/Bilateria_conserved-tissue_average_expr-NOSVA-log2-TPMs-NORM-BH_genes.tab"
	output:
		clade_level = GENERAL_PATTERNS+"/expression_correlations/expression_correlations_by_clade-BH_genes.tab",
		vertebrata_pairwise = GENERAL_PATTERNS+"/expression_correlations/expression_correlations_pairwise_vertebrata-BH_genes.tab",
		insecta_pairwise = GENERAL_PATTERNS+"/expression_correlations/expression_correlations_pairwise_insecta-BH_genes.tab"	
	params:
		tissues = ALL_TISSUES,
		vertebrata = VERTEBRATA,
		insecta = INSECTA
	run:
		import pandas as pd
		import itertools
		import re

		tissues = params.tissues
		#Read input table
		input_df = pd.read_table(str(input), header=0, index_col=0, sep="\t")
		all_vertebrate_pairs = list(itertools.combinations(params.vertebrata, 2)) 
		all_insect_pairs = list(itertools.combinations(params.insecta, 2))
		#Initialize vertebrate final dataframe
		vertebrate_final_df = pd.DataFrame()
		#Get vertebrate correlations
		for species_pair in all_vertebrate_pairs:
		  #Isolate species
		  species1 = species_pair[0]
		  species2 = species_pair[1]
		  #Generate species dataframes
		  species1_df = input_df[[col for col in list(input_df.columns.values) if species1 in col]]
		  species2_df = input_df[[col for col in list(input_df.columns.values) if species2 in col]]
		  #Order columns
		  species1_df.columns = [re.sub(".*_", "", element) for element in list(species1_df.columns.values)]
		  species2_df.columns = [re.sub(".*_", "", element) for element in list(species2_df.columns.values)]
		  if species1=="Cmi" or species2=="Cmi":
		    species1_df = species1_df[[tissue for tissue in tissues if tissue != "Adipose"]]
		    species2_df = species2_df[[tissue for tissue in tissues if tissue != "Adipose"]]
		  else:
		    species1_df = species1_df[tissues]
		    species2_df = species2_df[tissues]
		  #Compute correlation
		  cor_df = species1_df.corrwith(species2_df, axis=1, method="spearman")
		  vertebrate_final_df = pd.concat([vertebrate_final_df, cor_df], axis=1)
		#Added Jan 11th 2024
		vertebrate_final_df.columns = [element[0]+"_"+element[1] if element[0]<element[1] else element[1]+"_"+element[0]for element in all_vertebrate_pairs]
		#Compute mean by row
		vertebrate_mean_df = vertebrate_final_df.mean(axis=1)

		#initialize insect final df
		insect_final_df = pd.DataFrame()
		for species_pair in all_insect_pairs:
		  #Isolate species
		  species1 = species_pair[0]
		  species2 = species_pair[1]
		  #Generate species dataframes
		  species1_df = input_df[[col for col in list(input_df.columns.values) if species1 in col]]
		  species2_df = input_df[[col for col in list(input_df.columns.values) if species2 in col]]
		  #Order columns
		  species1_df.columns = [re.sub(".*_", "", element) for element in list(species1_df.columns.values)]
		  species2_df.columns = [re.sub(".*_", "", element) for element in list(species2_df.columns.values)]
		  species1_df = species1_df[tissues]
		  species2_df = species2_df[tissues]
		  #Compute correlation
		  cor_df = species1_df.corrwith(species2_df, axis=1, method="spearman")
		  insect_final_df = pd.concat([insect_final_df, cor_df], axis=1)
		#Added Jan 11th 2024
		insect_final_df.columns = [element[0]+"_"+element[1] if element[0]<element[1] else element[1]+"_"+element[0]for element in all_insect_pairs]
		#Compute mean by row
		insect_mean_df = insect_final_df.mean(axis=1)
		#Combine dataframes
		combined_df = pd.concat([vertebrate_mean_df, insect_mean_df], axis=1)
		combined_df.columns = ["expression_correlations_spearman_vertebrata", "expression_correlations_spearman_insecta"]
		combined_df["expression_correlations_spearman_delta"] = combined_df["expression_correlations_spearman_vertebrata"] - combined_df["expression_correlations_spearman_insecta"]
		combined_df.index.name = "OG_ID"

		#### Save to output
		combined_df.to_csv(str(output.clade_level), sep="\t", header=True, index=True, na_rep="NA")
		#Also save single clade correlations to output
		vertebrate_final_df.index.name = "OG_ID"
		insect_final_df.index.name = "OG_ID"
		vertebrate_final_df.to_csv(str(output.vertebrata_pairwise), sep="\t", header=True, index=True, na_rep="NA")
		insect_final_df.to_csv(str(output.insecta_pairwise), sep="\t", header=True, index=True, na_rep="NA")		

#######################################
###### EXPR DIST BY ORTHOGROUP ########
#######################################


### This is the Euclidean distance
rule compute_expr_dist_by_OG:
	input:
		best_hits = GENE_SETS_DIR+"/All_version2/STRICT/Bilateria/conserved/Bilateria_conserved-reclustered_orthogroups-BH_genes.txt",
		rel_expr_files = expand(REL_EXPR_DIR+"/{species}-protein_coding_relative_ts.tab", species=VERTEBRATA+[species if species != "BmA" else "Bmo" for species in INSECTA]) 
	output:	
		clade_level = GENERAL_PATTERNS+"/expression_distances/expression_distances_by_clade-BH_genes.tab",
		vertebrata_pairwise = GENERAL_PATTERNS+"/expression_distances/expression_distances_pairwise_vertebrata-BH_genes.tab",
		insecta_pairwise = GENERAL_PATTERNS+"/expression_distances/expression_distances_pairwise_insecta-BH_genes.tab", 
	params:
		vertebrata = VERTEBRATA,
		insecta = [species if species != "BmA" else "Bmo" for species in INSECTA],
		tissues = ALL_TISSUES
	run:
		import pandas as pd
		import numpy as np
		import itertools
	
		##### Define function to compute pairwise expr_sim
		def compute_pairwise_expr_dist(GeneID1_expr, GeneID2_expr):
		  a = np.array(GeneID1_expr)
		  b = np.array(GeneID2_expr)
		  expr_dist = np.linalg.norm(a-b)
		  final_expr_dist = 1-expr_dist
		  return(final_expr_dist) 

		#Upload best-hits dataframe
		best_hits_df = pd.read_table(str(input.best_hits), sep="\t", index_col=False, header=None, names=["OG_ID", "Species", "GeneID"])
		best_hits_df["Species"] = [species if species != "BmA" else "Bmo" for species in list(best_hits_df["Species"])]
		BH_genes = list(best_hits_df["GeneID"])
		#Upload all relative expr files into a single df: index=GeneID, columns=Tissues, values=Relative expression 
		all_species_rel_expr_df = pd.DataFrame()
		for my_file in list(input.rel_expr_files):
		  rel_expr_df = pd.read_table(my_file, sep="\t", index_col=0, header=0)
		  #Reorder columns so that all tissues have the same order for all species 
		  rel_expr_df = rel_expr_df[[tissue for tissue in params.tissues if tissue != "Adipose"]]
		  #Attach to general df
		  all_species_rel_expr_df = pd.concat([all_species_rel_expr_df, rel_expr_df])
		#### Filter only for the genes in the best-hits table
		all_species_rel_expr_best_hits_df = all_species_rel_expr_df.loc[all_species_rel_expr_df.index.isin(BH_genes)]
		#Transform dataframe to dictionary: key=GeneID, value=ordered list of relative expr
		GeneID_rel_expr_dict = all_species_rel_expr_best_hits_df.T.to_dict("list")
	
		################################################
		############## VERTEBRATA ######################
		################################################
		vertebrate_df = best_hits_df.loc[best_hits_df["Species"].isin(params.vertebrata)].copy() 
		#Get a dataframe with all pairs of vertebrate genes for each orthogroup
		vertebrate_grouped_df = vertebrate_df.groupby("OG_ID")
		vertebrate_pairwise_df = pd.DataFrame()
		for OG_ID, group in vertebrate_grouped_df:
		  all_geneIDs = list(group["GeneID"])
		  all_geneIDs_combos = itertools.combinations(all_geneIDs, 2)
		  group_df = pd.DataFrame(all_geneIDs_combos, columns=["GeneID1", "GeneID2"])
		  group_df["OG_ID"] = OG_ID
		  vertebrate_pairwise_df = pd.concat([vertebrate_pairwise_df, group_df])
		#Change column order
		vertebrate_pairwise_df = vertebrate_pairwise_df[["OG_ID", "GeneID1", "GeneID2"]]
		#Compute pairwise expression distances using function
		vertebrate_pairwise_df["Expr_dist"] = vertebrate_pairwise_df.apply(lambda x: compute_pairwise_expr_dist(GeneID_rel_expr_dict[x.GeneID1], GeneID_rel_expr_dict[x.GeneID2]), axis=1)
		#Compute average by orthogroup between all pairwise
		vertebrate_pairwise_grouped_df = vertebrate_pairwise_df.groupby("OG_ID")
		vertebrate_mean_df = pd.DataFrame()
		for OG_ID, group in vertebrate_pairwise_grouped_df:		
		  Expr_dist_mean = np.mean(group["Expr_dist"])
		  vertebrate_mean_df = pd.concat([vertebrate_mean_df, pd.DataFrame({"OG_ID" : [OG_ID], "expression_distances_vertebrata" : [Expr_dist_mean]})])

		################################################
		############## INSECTA #########################
		################################################
		insect_df = best_hits_df.loc[best_hits_df["Species"].isin(params.insecta)].copy() 
		#Get a dataframe with all pairs of insect genes for each orthogroup
		insect_grouped_df = insect_df.groupby("OG_ID")
		insect_pairwise_df = pd.DataFrame()
		for OG_ID, group in insect_grouped_df:
		  all_geneIDs = list(group["GeneID"])
		  all_geneIDs_combos = itertools.combinations(all_geneIDs, 2)
		  group_df = pd.DataFrame(all_geneIDs_combos, columns=["GeneID1", "GeneID2"])
		  group_df["OG_ID"] = OG_ID
		  insect_pairwise_df = pd.concat([insect_pairwise_df, group_df])
		#Change column order
		insect_pairwise_df = insect_pairwise_df[["OG_ID", "GeneID1", "GeneID2"]]
		#Compute pairwise expression distances using function
		insect_pairwise_df["Expr_dist"] = insect_pairwise_df.apply(lambda x: compute_pairwise_expr_dist(GeneID_rel_expr_dict[x.GeneID1], GeneID_rel_expr_dict[x.GeneID2]), axis=1)
		#Compute average by orthogroup between all pairwise
		insect_pairwise_grouped_df = insect_pairwise_df.groupby("OG_ID")
		insect_mean_df = pd.DataFrame()
		for OG_ID, group in insect_pairwise_grouped_df:		
		  Expr_dist_mean = np.mean(group["Expr_dist"])
		  insect_mean_df = pd.concat([insect_mean_df, pd.DataFrame({"OG_ID" : [OG_ID], "expression_distances_insecta" : [Expr_dist_mean]})])

		################################################
		######### JOIN AND SAVE TO FILE ################
		################################################
		combined_df = pd.merge(vertebrate_mean_df, insect_mean_df, on="OG_ID")
		combined_df["expression_distances_delta"] = combined_df["expression_distances_vertebrata"] - combined_df["expression_distances_insecta"]
		combined_df.to_csv(str(output.clade_level), sep="\t", header=True, index=False, na_rep="NA")
		##### Vertebrate and Insects pairwises
		GeneID_species_dict = pd.Series(best_hits_df.Species.values, index=best_hits_df.GeneID).to_dict()
		vertebrate_pairwise_df["GeneID1"] = vertebrate_pairwise_df["GeneID1"].map(GeneID_species_dict)
		vertebrate_pairwise_df["GeneID2"] = vertebrate_pairwise_df["GeneID2"].map(GeneID_species_dict)
		insect_pairwise_df["GeneID1"] = insect_pairwise_df["GeneID1"].map(GeneID_species_dict)
		insect_pairwise_df["GeneID2"] = insect_pairwise_df["GeneID2"].map(GeneID_species_dict)
		## Get species pairs and make sure they are ordered
		vertebrate_pairwise_df["Species_pair"] = [element[0]+"_"+element[1] if element[0]<element[1] else element[1]+"_"+element[0] for element in zip(list(vertebrate_pairwise_df["GeneID1"]),list(vertebrate_pairwise_df["GeneID2"]))]
		vertebrate_pairwise_wide_df = vertebrate_pairwise_df.pivot(index="OG_ID", columns="Species_pair", values="Expr_dist").reset_index()
		insect_pairwise_df["Species_pair"] = [element[0]+"_"+element[1] if element[0]<element[1] else element[1]+"_"+element[0] for element in zip(list(insect_pairwise_df["GeneID1"]),list(insect_pairwise_df["GeneID2"]))]
                insect_pairwise_wide_df = insect_pairwise_df.pivot(index="OG_ID", columns="Species_pair", values="Expr_dist").reset_index()
		#Change colnames to BmA for coherency with the other tables
		insect_pairwise_wide_df.columns = insect_pairwise_wide_df.columns.str.replace("Bmo", "BmA")
		## Save to output
                vertebrate_pairwise_wide_df.to_csv(str(output.vertebrata_pairwise), sep="\t", header=True, index=False, na_rep="NA")
                insect_pairwise_wide_df.to_csv(str(output.insecta_pairwise), sep="\t", header=True, index=False, na_rep="NA")


#######################################################
###### DEFINE MOST/LEAST CONSERVED CATEGORIES #########
#######################################################

#We can set for the top 500 genes for both directions and the delta
rule define_conservation_categories:
	input:
		GENERAL_PATTERNS+"/{measure}/{measure}_by_clade-BH_genes.tab"
	output:
		vertebrata_most_conserved = GENERAL_PATTERNS+"/{measure}/{measure}-{gene_number}_vertebrata_most_conserved-BH_genes.tab",
		vertebrata_least_conserved = GENERAL_PATTERNS+"/{measure}/{measure}-{gene_number}_vertebrata_least_conserved-BH_genes.tab",
		insecta_most_conserved = GENERAL_PATTERNS+"/{measure}/{measure}-{gene_number}_insecta_most_conserved-BH_genes.tab",
		insecta_least_conserved = GENERAL_PATTERNS+"/{measure}/{measure}-{gene_number}_insecta_least_conserved-BH_genes.tab",
		highest_delta = GENERAL_PATTERNS+"/{measure}/{measure}-{gene_number}_highest_delta-BH_genes.tab",
		lowest_delta = GENERAL_PATTERNS+"/{measure}/{measure}-{gene_number}_lowest_delta-BH_genes.tab",
	run:
		import pandas as pd

		#### Upload input table
		input_df = pd.read_table(str(input), sep="\t", header=0, index_col=False, names=["OG_ID", "Vertebrata", "Insecta", "Delta"])
		#### Get Outputs
		#Order by measure (ascending order). Remove eventual NA entries
		vertebrata_sorted_df = input_df.sort_values(by=["Vertebrata"]).dropna(subset=["Vertebrata"])
		insecta_sorted_df = input_df.sort_values(by=["Insecta"]).dropna(subset=["Insecta"])
		delta_sorted_df = input_df.sort_values(by=["Delta"]).dropna(subset=["Delta"])
		#Select top/bottom genes
		vertebrata_most_conserved_df = vertebrata_sorted_df.tail(int(wildcards.gene_number))
		vertebrata_least_conserved_df = vertebrata_sorted_df.head(int(wildcards.gene_number)) 	
		insecta_most_conserved_df = insecta_sorted_df.tail(int(wildcards.gene_number))
		insecta_least_conserved_df = insecta_sorted_df.head(int(wildcards.gene_number))
		highest_delta_df = delta_sorted_df.tail(int(wildcards.gene_number))
		lowest_delta_df = delta_sorted_df.head(int(wildcards.gene_number))
		#### Save Outputs
		vertebrata_most_conserved_df.to_csv(str(output.vertebrata_most_conserved), sep="\t", header=True, index=False, na_rep="NA")
		vertebrata_least_conserved_df.to_csv(str(output.vertebrata_least_conserved), sep="\t", header=True, index=False, na_rep="NA")
		insecta_most_conserved_df.to_csv(str(output.insecta_most_conserved), sep="\t", header=True, index=False, na_rep="NA")
		insecta_least_conserved_df.to_csv(str(output.insecta_least_conserved), sep="\t", header=True, index=False, na_rep="NA")
		highest_delta_df.to_csv(str(output.highest_delta), sep="\t", header=True, index=False, na_rep="NA")
		lowest_delta_df.to_csv(str(output.lowest_delta), sep="\t", header=True, index=False, na_rep="NA")

rule get_GO_enrichments_inputs:
	input:
		GENERAL_PATTERNS+"/{measure}/{measure}-{gene_number}_{category}-BH_genes.tab"
	output:
		GENERAL_PATTERNS+"/{measure}/GO_enrichments/{measure}-{gene_number}_{category}-BH_genes-GO_input.tab"
	shell:
		"""
		cat {input} | tail -n+2 | cut -f1 > {output}
		"""

#######################################################
###### GO_ENRICHMENTS  ################################
#######################################################

#The background is only composed of bilaterian-conserved orthogroups
rule GO_enrichment_gprofiler2:
	input:
		gene_set = GENERAL_PATTERNS+"/{measure}/GO_enrichments/{measure}-{gene_number}_{category}-BH_genes-GO_input.tab",
		background = GO_TRANSFERS+"/All_version2/GO_backgrounds/orthogroups-GO_background.txt",
		annot = GO_TRANSFERS+"/All_version2/GO_annot/{species}_transfers/orthogroups_from_{species}-transferred_GO-reduced.gmt"
	output:
		GENERAL_PATTERNS+"/{measure}/GO_enrichments/{species}_transfers/{measure}-{gene_number}_{category}-BH_genes-GO_res.tab"
	conda:
		CONDA_ENVS+"/R4.2_env.yml"
	shell:
		"""
		Rscript	{RUN_GPROFILER2} \
			{input.gene_set} \
			{input.background} \
			{input.annot} \
			{output}
		"""


#######################################################
###### NEW GO TRANSFERS BASED ON BEST HITS ############
#######################################################

rule generate_GO_gmt:
	input:
		DATA+"/GO_annotations/backgrounds/Bilateria_conserved-GO_transfers-BH_genes.txt"
	output:
		DATA+"/GO_annotations/backgrounds/Bilateria_conserved-GO_transfers-BH_genes.gmt"
	shell:
		"""
		python {GET_GMT_FILES} -GO {input} -o {output}
		"""
