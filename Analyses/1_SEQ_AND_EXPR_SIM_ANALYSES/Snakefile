configfile: "config.yaml"

###### paths ###############
DATA = config["general_paths"]["data"]
SRC = config["general_paths"]["src"]
CONDA_ENVS = config["general_paths"]["conda_envs"]
GENERAL_PATTERNS = config["paths"]["general_patterns"]
PARALOG_SETS_DIR = config["paths"]["paralog_sets_dir"]

######## tools ############
GET_GMT_FILES = config["tools"]["get_gmt_files"]
TRANSFER_GO_SETS = config["tools"]["transfer_GO_sets"]

###### variables ###########
ALL_SPECIES = config["variables"]["all_species"]
BILATERIA = ALL_SPECIES
VERTEBRATA = config["variables"]["vertebrata"]
INSECTA = config["variables"]["insecta"]
MY_MEASURES = config["variables"]["my_measures"]
CONSERVATION_CATEGORIES = config["variables"]["conservation_categories"]
PARALOG_TYPES = config["variables"]["paralog_types"]
EXTRA_METRICS = config["variables"]["extra_metrics"]

###### targets ##########
DEFINE_GENE_GROUPS = expand("{path}/{paralog_type}/{measure}/GO_enrichments/{measure}-{gene_number}_{category}-{paralog_type}_genes-GO_input.tab", path=GENERAL_PATTERNS, measure=MY_MEASURES, gene_number=500, category=CONSERVATION_CATEGORIES, paralog_type=PARALOG_TYPES)
TRANSFERRED_GOS = expand("{path}/GO_annotations/backgrounds/Bilateria_conserved-GO_transfers-{paralog_type}_genes.gmt", path=DATA, paralog_type=PARALOG_TYPES)
EXTRA_METRICS_BY_CLADE = expand("{path}/{paralog_type}/{measure}/{measure}_by_clade-{paralog_type}_genes.tab", path=GENERAL_PATTERNS, paralog_type="ALL", measure=EXTRA_METRICS)
EXTRA_METRICS_GO_INPUTS = expand("{path}/{paralog_type}/{measure}/GO_enrichments/{measure}-{gene_number}_{category}-{paralog_type}_genes-GO_input.tab", path=GENERAL_PATTERNS, paralog_type="ALL", gene_number=500, category=CONSERVATION_CATEGORIES, measure=EXTRA_METRICS)

####### rules ############
rule all:	
	input:

#######################################################
###### SEQ SIM AND EXPR SIM BY OG #####################
#######################################################

#### This rule can be used for all 6 paralog groups
rule compute_average_measure_by_OG:
	input:
		measure_file = PARALOG_SETS_DIR+"/pairwise_{measure}/all_pairwise_{measure}.txt"
	output:
		GENERAL_PATTERNS+"/{paralog_type}/{measure}/{measure}_by_clade-{paralog_type}_genes.tab",
	params:
		vertebrata = VERTEBRATA,
		insecta = INSECTA
	run:
		import pandas as pd
		import re

		#Read input
		measure_df = pd.read_table(str(input.measure_file), sep="\t", index_col=False, header=None, names=["OG_ID", "Species1", "Species2", "GeneID1", "GeneID2", str(wildcards.measure)])

		#Filter only for Vertebrate species
		measure_vertebrate_df = measure_df.loc[(measure_df["Species1"].isin(params.vertebrata)) & (measure_df["Species2"].isin(params.vertebrata))]
		measure_vertebrate_df = measure_vertebrate_df.rename(columns={str(wildcards.measure) : str(wildcards.measure)+"_vertebrata"})
		#For each GeneID and target species, compute the average of the target species paralogs
		measure_vertebrate_mean_df = measure_vertebrate_df.groupby(["OG_ID", "Species1", "GeneID1", "Species2"]).mean().reset_index()
		#For each GeneID, compute the average among target species
		measure_vertebrate_mean_df = measure_vertebrate_mean_df.groupby(["OG_ID", "Species1", "GeneID1"]).mean().reset_index()
		#For each Species, compute the average among its geneIDs
		measure_vertebrate_mean_df = measure_vertebrate_mean_df.groupby(["OG_ID", "Species1"]).mean().reset_index()
		#For each OG, compute the average among all species
		measure_vertebrate_mean_df = measure_vertebrate_mean_df.groupby(["OG_ID"]).mean().reset_index()

		#Filter only for Insect species
		measure_insect_df = measure_df.loc[(measure_df["Species1"].isin(params.insecta)) & (measure_df["Species2"].isin(params.insecta))]
		measure_insect_df = measure_insect_df.rename(columns={str(wildcards.measure) : str(wildcards.measure)+"_insecta"})
		#For each GeneID and target species, compute the average of the target species paralogs
		measure_insect_mean_df = measure_insect_df.groupby(["OG_ID", "Species1", "GeneID1", "Species2"]).mean().reset_index()
		#For each GeneID, compute the average among target species
		measure_insect_mean_df = measure_insect_mean_df.groupby(["OG_ID", "Species1", "GeneID1"]).mean().reset_index()
		#For each Species, compute the average among its geneIDs
		measure_insect_mean_df = measure_insect_mean_df.groupby(["OG_ID", "Species1"]).mean().reset_index()
		#For each OG, compute the average among all species
		measure_insect_mean_df = measure_insect_mean_df.groupby(["OG_ID"]).mean().reset_index()

		#Combine the two dataframes
		combined_df = pd.merge(measure_vertebrate_mean_df, measure_insect_mean_df, on="OG_ID")
		#Compute delta
		combined_df[str(wildcards.measure)+"_delta"] = combined_df[str(wildcards.measure)+"_vertebrata"] - combined_df[str(wildcards.measure)+"_insecta"]
		#Save to output
		combined_df.to_csv(str(output), sep="\t", header=True, index=False, na_rep="NA")

#######################################################
###### DEFINE MOST/LEAST CONSERVED CATEGORIES #########
#######################################################

#We can set for the top 500 genes for both directions and the delta
rule define_conservation_categories:
	input:
		GENERAL_PATTERNS+"/{paralog_type}/{measure}/{measure}_by_clade-{paralog_type}_genes.tab"
	output:
		vertebrata_most_conserved = GENERAL_PATTERNS+"/{paralog_type}/{measure}/{measure}-{gene_number}_vertebrata_most_conserved-{paralog_type}_genes.tab",
		vertebrata_least_conserved = GENERAL_PATTERNS+"/{paralog_type}/{measure}/{measure}-{gene_number}_vertebrata_least_conserved-{paralog_type}_genes.tab",
		insecta_most_conserved = GENERAL_PATTERNS+"/{paralog_type}/{measure}/{measure}-{gene_number}_insecta_most_conserved-{paralog_type}_genes.tab",
		insecta_least_conserved = GENERAL_PATTERNS+"/{paralog_type}/{measure}/{measure}-{gene_number}_insecta_least_conserved-{paralog_type}_genes.tab",
		highest_delta = GENERAL_PATTERNS+"/{paralog_type}/{measure}/{measure}-{gene_number}_highest_delta-{paralog_type}_genes.tab",
		lowest_delta = GENERAL_PATTERNS+"/{paralog_type}/{measure}/{measure}-{gene_number}_lowest_delta-{paralog_type}_genes.tab",
	run:
		import pandas as pd

		#### Upload input table
		input_df = pd.read_table(str(input), sep="\t", header=0, index_col=False, names=["OG_ID", "Vertebrata", "Insecta", "Delta"])
		#### Get Outputs
		#Order by measure (ascending order). Remove eventual NA entries
		vertebrata_sorted_df = input_df.sort_values(by=["Vertebrata"]).dropna(subset=["Vertebrata"])
		insecta_sorted_df = input_df.sort_values(by=["Insecta"]).dropna(subset=["Insecta"])
		delta_sorted_df = input_df.sort_values(by=["Delta"]).dropna(subset=["Delta"])
		#Select top/bottom genes
		vertebrata_most_conserved_df = vertebrata_sorted_df.tail(int(wildcards.gene_number))
		vertebrata_least_conserved_df = vertebrata_sorted_df.head(int(wildcards.gene_number)) 	
		insecta_most_conserved_df = insecta_sorted_df.tail(int(wildcards.gene_number))
		insecta_least_conserved_df = insecta_sorted_df.head(int(wildcards.gene_number))
		highest_delta_df = delta_sorted_df.tail(int(wildcards.gene_number))
		lowest_delta_df = delta_sorted_df.head(int(wildcards.gene_number))
		#### Save Outputs
		vertebrata_most_conserved_df.to_csv(str(output.vertebrata_most_conserved), sep="\t", header=True, index=False, na_rep="NA")
		vertebrata_least_conserved_df.to_csv(str(output.vertebrata_least_conserved), sep="\t", header=True, index=False, na_rep="NA")
		insecta_most_conserved_df.to_csv(str(output.insecta_most_conserved), sep="\t", header=True, index=False, na_rep="NA")
		insecta_least_conserved_df.to_csv(str(output.insecta_least_conserved), sep="\t", header=True, index=False, na_rep="NA")
		highest_delta_df.to_csv(str(output.highest_delta), sep="\t", header=True, index=False, na_rep="NA")
		lowest_delta_df.to_csv(str(output.lowest_delta), sep="\t", header=True, index=False, na_rep="NA")


#######################################################
###### NEW GO TRANSFERS BASED ON SPECIFIC GENES #######
#######################################################

rule generate_GO_txt:
	input:
		GOs = "/users/mirimia/fmantica/projects/vertebrate_insect_GE/data/GO_annotations/full_annot/Hs2-GO_annot-Ensembl_v106.txt",
		orthogroups = PARALOG_SETS_DIR+"/selected_paralog_sets/Bilateria_conserved-{paralog_type}_genes.txt"
	output:
		DATA+"/GO_annotations/backgrounds/Bilateria_conserved-GO_transfers-{paralog_type}_genes.txt"
	params:
		query_species = "Hs2"
	conda:
		CONDA_ENVS+"/R4.2_env.yml"
	shell:
		"""
		Rscript {TRANSFER_GO_SETS}	--GO {input.GOs} \
						--orthogroups {input.orthogroups} \
						--query_species {params.query_species} \
						--output {output}
		"""


rule generate_GO_gmt:
	input:
		DATA+"/GO_annotations/backgrounds/Bilateria_conserved-GO_transfers-{paralog_type}_genes.txt"	
	output:
		DATA+"/GO_annotations/backgrounds/Bilateria_conserved-GO_transfers-{paralog_type}_genes.gmt"
	shell:
		"""
		python {GET_GMT_FILES} -GO {input} -o {output}
		"""

#######################################################
###### GO_ENRICHMENTS  ################################
#######################################################

rule get_GO_enrichments_inputs:
	input:
		GENERAL_PATTERNS+"/{paralog_type}/{measure}/{measure}-{gene_number}_{category}-{paralog_type}_genes.tab"
	output:
		GENERAL_PATTERNS+"/{paralog_type}/{measure}/GO_enrichments/{measure}-{gene_number}_{category}-{paralog_type}_genes-GO_input.tab"
	shell:
		"""
		cat {input} | tail -n+2 | cut -f1 > {output}
		"""
