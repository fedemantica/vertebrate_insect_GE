configfile: "config.yaml"

###### paths ###############
DATA = config["general_paths"]["data"]
SRC = config["general_paths"]["src"]
CONDA_ENVS = config["general_paths"]["conda_envs"]
GENE_SETS_DIR = config["paths"]["gene_sets_dir"]
ORIGINAL_REL_EXPR_DIR = config["paths"]["original_rel_expr_dir"]
REL_EXPR_DIR = config["paths"]["rel_expr_dir"]
PARALOG_SETS_DIR = config["paths"]["paralog_sets_dir"]
HOUSEKEEPING_DIR = config["paths"]["housekeeping_dir"]

######## tools ############
COMPUTE_REL_EXPR = config["tools"]["compute_rel_expr"]
COMPUTE_PAIRWISE_EXPR_SIM = config["tools"]["compute_pairwise_expr_sim"]

###### variables ###########
ALL_SPECIES = config["variables"]["all_species"]
BILATERIA = ALL_SPECIES
VERTEBRATA = config["variables"]["vertebrata"]
INSECTA = config["variables"]["insecta"]
DEUTEROSTOMA = config["variables"]["deuterostoma"]
PROTOSTOMA = config["variables"]["protostoma"]

CLADE_SPECIES_DICT = {}
CLADE_SPECIES_DICT["Vertebrata"] = VERTEBRATA
CLADE_SPECIES_DICT["Insecta"] = INSECTA
CLADE_SPECIES_DICT["Bilateria"] = BILATERIA

ALL_TISSUES = config["variables"]["all_tissues"]

MY_MEASURES = config["variables"]["my_measures"]
PARALOG_TYPES = config["variables"]["paralog_types"]

#Count batches number and get a list of all batches
import os.path
BATCHES_FILE = PARALOG_SETS_DIR+"/orthogroups_batches/batches_number.txt"
if os.path.isfile(BATCHES_FILE):
  with open(BATCHES_FILE) as f:
    TOT_BATCHES = int(f.readline().strip())
    BATCH_NUMBER = list(range(1, TOT_BATCHES+1))
else:
  BATCH_NUMBER = 1

###### targets ##########
ALL_SIM_SCORES = PARALOG_SETS_DIR+"/selected_paralog_sets/all_seq_expr_scores.tab"
DEFINE_PARALOG_SETS = expand("{path}/selected_paralog_sets_v1/Bilateria_conserved-{paralog_type}_genes.txt", path=PARALOG_SETS_DIR, paralog_type=PARALOG_TYPES)
SPECIES_AVERAGE_SIMILARITIES = expand("{path}/pairwise_{measure}/average_{measure}_by_species.txt", path=PARALOG_SETS_DIR, measure=MY_MEASURES)
VERT_HOUSEKEEPING_OGS = expand("{path}/Housekeeping_vertebrata-{paralog_type}-TauCutoff_{tau_cutoff}.tab", path=HOUSEKEEPING_DIR, paralog_type="ALL", tau_cutoff=0.25)

####### rules ############
rule all:	
	input:
		#VERT_HOUSEKEEPING_OGS	
		SPECIES_AVERAGE_SIMILARITIES
		DEFINE_PARALOG_SETS
		#ALL_SIM_SCORES

#######################################################
###### TRANSFORMATIONS FOR PARALOG SELECTION ##########
#######################################################

rule average_similarities_by_gene:
	input:
		PARALOG_SETS_DIR+"/pairwise_{measure}/all_pairwise_{measure}.txt"
	output:
		PARALOG_SETS_DIR+"/pairwise_{measure}/average_{measure}_by_gene.txt"
	run:
		import pandas as pd
		
		#### Upload input
		pairwise_similarity_df = pd.read_table(str(input), sep="\t", index_col=False, header=None, names=["OG_ID", "Species1", "Species2", "GeneID1", "GeneID2", "Sim_value"])
		### Compute average by query gene
		average_similarity_df = pairwise_similarity_df.groupby(["OG_ID", "Species1", "GeneID1"])["Sim_value"].mean().reset_index()
		### Save to output
		average_similarity_df.to_csv(str(output), sep="\t", index=False, header=False, na_rep="NA")

######### ZSCORES
rule zscore_measures_by_species:
	input:
		PARALOG_SETS_DIR+"/pairwise_{measure}/average_{measure}_by_gene.txt"
	output:
		PARALOG_SETS_DIR+"/pairwise_{measure}/average_{measure}_by_gene-zscored_by_species.txt"
	run:
		import pandas as pd

		#### Define function
		zscore = lambda x: (x - x.mean()) / x.std()
		#### Upload input
		average_similarity_df = pd.read_table(str(input), sep="\t", index_col=False, header=None, names=["OG_ID", "Species", "GeneID", "Sim_value"])
		#### Add zscore column
		average_similarity_df.insert(4, "Zscore", average_similarity_df.groupby("Species")["Sim_value"].transform(zscore))
		#### Save to output		
		average_similarity_df.to_csv(str(output), sep="\t", index=False, header=False, na_rep="NA")

rule sum_seq_expr_zscores_by_gene:
	input:
		sequence_similarities = PARALOG_SETS_DIR+"/pairwise_sequence_similarities/average_sequence_similarities_by_gene-zscored_by_species.txt",
		expression_similarities = PARALOG_SETS_DIR+"/pairwise_expression_similarities/average_expression_similarities_by_gene-zscored_by_species.txt"
	output:
		PARALOG_SETS_DIR+"/selected_paralog_sets/all_seq_expr_scores.tab"
	run:	
		import pandas as pd

		#### Upload input
		seq_sim_df = pd.read_table(str(input.sequence_similarities), sep="\t", index_col=False, header=None, names=["OG_ID", "Species", "GeneID", "Seq_sim", "Seq_zscore"])
		expr_sim_df = pd.read_table(str(input.expression_similarities), sep="\t", index_col=False, header=None, names=["OG_ID", "Species", "GeneID", "Expr_sim", "Expr_zscore"])
		#### Combine dataframes
		combined_df = pd.merge(seq_sim_df, expr_sim_df, on=["OG_ID", "Species", "GeneID"])
		combined_df["Summed_zscore"] = combined_df["Seq_zscore"]+combined_df["Expr_zscore"]
		#### Save to output
		combined_df.to_csv(str(output), sep="\t", index=False, header=True, na_rep="NA")
		

#######################################################
################ SELECT PARALOGS ######################
#######################################################

rule select_paralog_sets:
	input:
		PARALOG_SETS_DIR+"/selected_paralog_sets/all_seq_expr_scores.tab"
	output:
		expand("{path}/selected_paralog_sets/Bilateria_conserved-{paralog_type}_genes-extra_info.txt", path=PARALOG_SETS_DIR, paralog_type=PARALOG_TYPES)
	params:
		output_prefix = PARALOG_SETS_DIR+"/selected_paralog_sets/Bilateria_conserved-",
		output_suffix = "_genes-extra_info.txt"
	run:
		import pandas as pd

		#### Upload input
		scores_df = pd.read_table(str(input), sep="\t", index_col=False, header=0)
		#### Select BA and BD based on combined
		BAc_df = scores_df.sort_values("Summed_zscore", ascending=False).drop_duplicates(["OG_ID", "Species"])
		BDc_df = scores_df.sort_values("Summed_zscore", ascending=True).drop_duplicates(["OG_ID", "Species"])
		#### Select BA and BD based on sequence
		BAs_df = scores_df.sort_values("Seq_zscore", ascending=False).drop_duplicates(["OG_ID", "Species"])
		BDs_df = scores_df.sort_values("Seq_zscore", ascending=True).drop_duplicates(["OG_ID", "Species"])
		#### Select BA and BD based on expression
		BAe_df = scores_df.sort_values("Expr_zscore", ascending=False).drop_duplicates(["OG_ID", "Species"])
		BDe_df = scores_df.sort_values("Expr_zscore", ascending=True).drop_duplicates(["OG_ID", "Species"])
		#### Save to file(s)
		BAc_df.to_csv(params.output_prefix+"BA_comb"+params.output_suffix, sep="\t", index=False, header=True, na_rep="NA")
		BDc_df.to_csv(params.output_prefix+"BD_comb"+params.output_suffix, sep="\t", index=False, header=True, na_rep="NA")
		BAs_df.to_csv(params.output_prefix+"BA_seq"+params.output_suffix, sep="\t", index=False, header=True, na_rep="NA")
		BDs_df.to_csv(params.output_prefix+"BD_seq"+params.output_suffix, sep="\t", index=False, header=True, na_rep="NA")
		BAe_df.to_csv(params.output_prefix+"BA_expr"+params.output_suffix, sep="\t", index=False, header=True, na_rep="NA")
		BDe_df.to_csv(params.output_prefix+"BD_expr"+params.output_suffix, sep="\t", index=False, header=True, na_rep="NA")		


rule remove_extra_info_paralog_sets:
	input:
		PARALOG_SETS_DIR+"/selected_paralog_sets/Bilateria_conserved-{paralog_type}_genes-extra_info.txt"
	output:
		PARALOG_SETS_DIR+"/selected_paralog_sets/Bilateria_conserved-{paralog_type}_genes.txt"
	shell:
		"""
		cat {input} | tail -n+2 | cut -f1-3 > {output}
		"""

#######################################################
###### TRANSFORMATIONS FOR PARALOG AVERAGES ###########
#######################################################

rule average_similarities_by_species:
	input:
		PARALOG_SETS_DIR+"/pairwise_{measure}/average_{measure}_by_gene.txt"
	output:
		PARALOG_SETS_DIR+"/pairwise_{measure}/average_{measure}_by_species.txt"
	run:
		import pandas as pd
		
		#### Upload input
		gene_average_similarity_df = pd.read_table(str(input), sep="\t", index_col=False, header=None, names=["OG_ID", "Species", "GeneID", "Sim_value"])
		### Compute average by query gene
		species_average_similarity_df = gene_average_similarity_df.groupby(["OG_ID", "Species"])["Sim_value"].mean().reset_index()
		### Save to output
		species_average_similarity_df.to_csv(str(output), sep="\t", index=False, header=False, na_rep="NA")


#######################################################
###### DEFINE HOUSEKEEPING GENES ######################
#######################################################

rule define_vert_housekeeping_genes:
	input:
		orthogroups = PARALOG_SETS_DIR+"/selected_paralog_sets/Bilateria_conserved-{paralog_type}_genes.txt",
		taus = "/users/mirimia/fmantica/projects/bilaterian_GE/data/ts_gains_losses/species_QN_5_TPM_v6/All_version2/Bilateria_conserved_orthogroups-All_genes-associated_tissues.tab"
	output:
		orthogroups = HOUSEKEEPING_DIR+"/Housekeeping_vertebrata-{paralog_type}-TauCutoff_{tau_cutoff}.tab",
		OG_IDs = HOUSEKEEPING_DIR+"/Housekeeping_vertebrata-{paralog_type}-TauCutoff_{tau_cutoff}-OG_ID.tab"
	params:
		vertebrata = VERTEBRATA
	run:
		import pandas as pd

		### Read input
		orthogroup_df = pd.read_table(str(input.orthogroups), sep="\t", index_col=False, header=None, names=["OG_ID", "Species", "GeneID"])
		all_taus_df = pd.read_table(str(input.taus), sep="\t", index_col=False, header=None, names=["OG_ID", "Species", "GeneID", "Tau", "Associated_tissue", "Top_tissue", "Expr_cutoff"])
		### Filter only for vertebrates species
		vertebrata_df = orthogroup_df.loc[orthogroup_df["Species"].isin(params.vertebrata)].copy()
		### Add Tau info to gene
		GeneID_Tau_dict = pd.Series(all_taus_df.Tau.values, index=all_taus_df.GeneID).to_dict()
		vertebrata_df["Tau"] = vertebrata_df["GeneID"].map(GeneID_Tau_dict)
		### Select orthogroups containing exclusively high tau genes (NO i.e. housekeeping) and remove them
		High_Tau_OGs = list(set(list(vertebrata_df.loc[vertebrata_df["Tau"]>float(wildcards.tau_cutoff)]["OG_ID"])))
		housekeeping_vertebrata_df = vertebrata_df.loc[~(vertebrata_df["OG_ID"].isin(High_Tau_OGs))]
		### Save to file
		housekeeping_vertebrata_df.to_csv(str(output.orthogroups), sep="\t", index=False, header=False, na_rep="NA")
                housekeeping_vertebrata_df["OG_ID"].drop_duplicates().to_csv(str(output.OG_IDs), sep="\t", index=False, header=False, na_rep="NA") 


